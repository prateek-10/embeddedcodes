;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Tue Jan 16 2024
; Processor: AT89C52
; Compiler:  ASEM-51 (Proteus)
$NOMOD51
$INCLUDE (80C52.MCU)

      
      
;====================================================================
ADC equ P0   	;port 0 as ADC OUTPUT
DAC equ P2  

ALE equ P1.2  	;Port 1,2 as ALE for ADC 

SOC equ P1.3  	;Port 1.3 as start conversion (sc) for ADC 
EOC equ P3.3  	;external interrupt 0 

EXT equ TCON.2  ;setting external interrupt 1 as edge trigger 

OE equ P3.0

;LPF IIR filter
;Sampling frequency fs = 2000Hz
;Cutoff Frequency fc = 337Hz
;Order = 3
;Filter Coefficients

;Largest value to be represented is 2
;It will be represented by 0FFH
;2 equivalent to 256D FFH
;1 equivalent to 128D 80H
;All fractions will be converted to fixed point reperesentation by multiplying equivalent of 1 128D
;Decimal value*2^7 in hex

;Section-1:
;Numerator	Denominator	Gain
;1		1		0.20088918
;2		-0.77201736
;1		0.57557408
K_1 equ 1AH;

B_0_1 equ 80H;
B_1_1 equ 0FFH;
B_2_1 equ 80H;

A_0_1 EQU 80H;
A_1_1 EQU 63H;-ve
A_2_1 EQU 04AH;

;Section-2:
;Numerator	Denominator	Gain
;1		1		0.14954146
;2		-0.57468801
;1		0.17285386
K_2 equ 13H;

B_0_2 EQU 80H;
B_1_2 EQU 0FFH;
B_2_2 EQU 80H;

A_0_2 EQU 80H;
A_1_2 EQU 4AH;-ve
A_2_2 EQU 16H;

;Section-3:
;Numerator	Denominator	Gain
;1		1		0.36910723
;1		-0.261785530
;0		0

K_3 equ 2FH;

B_0_3 EQU 80H;
B_1_3 EQU 80H;
B_2_3 EQU 0H;

A_0_3 EQU 80H;
A_1_3 EQU 22H;-ve
A_2_3 EQU 0H;

;Output Gain 1


      ORG   	0000H
      JMP   	start

      ORG	0013H
      JMP 	isr

start:
      MOV RCAP2H,#0FFH	;640kHz clock	
      MOV RCAP2L,#0FEH
      
      MOV T2MOD, #02H	;Programmable clock timer 2
      CLR T2CON.0       ;16bit autoreload
      CLR T2CON.1       ;In timer mode 
      SETB TR2          ;Start the timer 
      
      MOV IE,#84H      	;To enable external interrupt 1 
      MOV ADC,#0FFH  	;configure po as an iput for receiving data of DAC 
      MOV DAC,#00H    	;Configure p2 as an output portfor sending  data to DAC 
      
      MOV R7,#00H	;Will store current values
      MOV R6,#00H
      
      MOV R5,#00H
      
      MOV R4,#00H
      MOV R3,#00H
      MOV R2,#00H
      MOV R1,#00H
      MOV R0,#00H
      
      CLR C
      
      SETB EXT
      
      SETB ALE   ;set ALE to start conversion and selecting channel 1 input 
      SETB SOC   ;set SC to start the conversion of ADC  
      
      CLR ALE
      CLR SOC
      
loop:
      JMP loop

isr:
      PUSH ACC
      PUSH PSW
      
      SETB OE		;Enable ADC output
      
      MOV A, ADC	;Read ADC output

      SETB ALE
      SETB SOC
      
      CLR ALE
      CLR SOC
      
      ;Section-1
      
      MOV B,#K_1	;Multiplying K1 to current sample
      MUL AB
      MOV A,B
      
      MOV R7,A
      
      MOV A,R0		;k1*x(n)-a11*y1(n-1)
      MOV B,#A_1_1
      MUL AB
      MOV A,B
      ADD A,R7
      MOV R7,A
      
      MOV A,R1		;k1*x(n)-a11*y1(n-1)-a21*y1(n-1)
      MOV B,#A_2_1
      MUL AB
      MOV A,R7
      CLR C
      SUBB A,B
      
      MOV R6,A		;Store k1*x(n)-a11*y1(n-1)-a21*y1(n-2)
      MOV R7,A
      
      MOV A,R0		;k1*x(n)-a11*y1(n-1)-a21*y1(n-2)+b11*y1(n-1)
      MOV B,#B_1_1
      MUL AB
      MOV A,B
      ADD A,R7
      
      MOV R7,A		;k1*x(n)-a11*y1(n-1)-a21*y1(n-2)+b11*y1(n-1)+b21*y1(n-2)
      MOV A,R1
      MOV B,#B_2_1
      MUL AB
      MOV A,B
      ADD A,R7
      MOV R7,A
      
      MOV A,R0
      MOV R1,A
      
      MOV A,R6
      RLC A
      MOV R0,A
      
      MOV A,R7
      RLC A
      ;Section-2
      
      MOV B,#K_2	;Multiplying k2 to current value
      MUL AB
      MOV A,B
      
      MOV R7,A
      
      MOV A,R2		;k2*y2(n)-a12*y2(n-1)
      MOV B,#A_1_2
      MUL AB
      MOV A,B
      ADD A,R7
      MOV R7,A
      
      MOV A,R3		;k2*y1(n)-a12*y2(n-1)-a22*y2(n-1)
      MOV B,#A_2_2
      MUL AB
      MOV A,R7
      CLR C
      SUBB A,B
      
      MOV R6,A		;Store k2*y1(n)-a12*y2(n-1)-a22*y2(n-1)
      MOV R7,A
      
      MOV A,R2		;k2*y1(n)-a12*y2(n-1)-a22*y2(n-1)+b12*y2(n-1)
      MOV B,#B_1_2
      MUL AB
      MOV A,B
      ADD A,R7
      
      MOV R7,A		;k2*y1(n)-a12*y2(n-1)-a22*y2(n-1)+b12*y2(n-1)+b22*y2(n-2)
      MOV A,R3
      MOV B,#B_2_2
      MUL AB
      MOV A,B
      ADD A,R7
      MOV R7,A
      
      MOV A,R2
      MOV R3,A
      
      MOV A,R6
      RLC A
      MOV R2,A
      
      MOV A,R7
      RLC A
      ;Section-3
      
      MOV B,#K_3	;Multiplying K3 to current sample
      MUL AB
      MOV A,B
      
      MOV R7,A
      
      MOV A,R4		;k3*y2(n)-a13*y3(n-1)
      MOV B,#A_1_3
      MUL AB
      MOV A,B
      ADD A,R7
      MOV R7,A
      
      MOV R6,A		;Store k3*y2(n)-a13*y3(n-1)
      
      MOV A,R4		;k3*y2(n)-a13*y3(n-1)+b13*y3(n-1)
      MOV B,#B_1_3
      MUL AB
      MOV A,B
      ADD A,R7
      
      MOV A,R6
      RLC A
      MOV R4,A
      
      MOV A,R7
      
      ;Displaying Output
      RLC A
      MOV DAC,A		;Sending to DAC for display
      
      POP PSW
      POP ACC
      RETI
      
END
